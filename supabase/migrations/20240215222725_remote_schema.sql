
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE SCHEMA IF NOT EXISTS "public";

ALTER SCHEMA "public" OWNER TO "pg_database_owner";

SET default_tablespace = '';

SET default_table_access_method = "heap";

create or replace function auth.user_id() returns text as $$
  select nullif(current_setting('request.jwt.claims', true)::json->>'userId', '')::text;
$$ language sql stable;

CREATE TABLE IF NOT EXISTS "public"."memos" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "todo_id" bigint,
    "thought_id" bigint,
    "user_id" text
);

ALTER TABLE "public"."memos" OWNER TO "postgres";

ALTER TABLE "public"."memos" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."memos_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."thoughts" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "description" text NOT NULL,
    "user_id" text
);

ALTER TABLE "public"."thoughts" OWNER TO "postgres";

ALTER TABLE "public"."thoughts" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."thoughts_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."todos" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "title" character varying NOT NULL,
    "description" text,
    "complete_by" timestamp with time zone,
    "completed" boolean DEFAULT false NOT NULL,
    "user_id" text
);

ALTER TABLE "public"."todos" OWNER TO "postgres";

ALTER TABLE "public"."todos" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."todos_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."memos"
    ADD CONSTRAINT "memos_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."thoughts"
    ADD CONSTRAINT "thoughts_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."todos"
    ADD CONSTRAINT "todos_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."memos"
    ADD CONSTRAINT "public_memos_thought_id_fkey" FOREIGN KEY (thought_id) REFERENCES public.thoughts(id) ON DELETE CASCADE;

ALTER TABLE ONLY "public"."memos"
    ADD CONSTRAINT "public_memos_todo_id_fkey" FOREIGN KEY (todo_id) REFERENCES public.todos(id) ON DELETE CASCADE;

ALTER TABLE "public"."memos" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."thoughts" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."todos" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "users can select their own memos" ON "public"."memos" FOR SELECT USING ((auth.user_id() = user_id));

CREATE POLICY "users can select their own thoughts" ON "public"."thoughts" FOR SELECT USING ((auth.user_id() = user_id));

CREATE POLICY "users can select their own todos" ON "public"."todos" FOR SELECT USING ((auth.user_id() = user_id));

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."memos" TO "anon";
GRANT ALL ON TABLE "public"."memos" TO "authenticated";
GRANT ALL ON TABLE "public"."memos" TO "service_role";

GRANT ALL ON SEQUENCE "public"."memos_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."memos_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."memos_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."thoughts" TO "anon";
GRANT ALL ON TABLE "public"."thoughts" TO "authenticated";
GRANT ALL ON TABLE "public"."thoughts" TO "service_role";

GRANT ALL ON SEQUENCE "public"."thoughts_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."thoughts_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."thoughts_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."todos" TO "anon";
GRANT ALL ON TABLE "public"."todos" TO "authenticated";
GRANT ALL ON TABLE "public"."todos" TO "service_role";

GRANT ALL ON SEQUENCE "public"."todos_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."todos_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."todos_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
